// function declaration
// Тип функции, который изучали ранее 
​
// function printHi(name){ 
//   console.log('_*'.repeat(10))
//   console.log('Добро пожаловать, дорогой '+ name)
//   console.log('_*'.repeat(10))
// }
​
// printHi('Дмитрий')
​
// (Задача, наглядно демонстрирующая важность return)
// Создайте функцию quad(), которая возвращает квадрат числа. 
// Возьмите разницу переданного аргумента от результата выполнения функции
// Примечение: разницу нельзя описывать в теле функции
​
// return позволяет далее в коде работать с результатом работы функции. 
// без него мы бы не смоги решить задачу
​
// function quad(n){
//   let result = n ** 2
//   return result
// }
​
// let result2 = quad(5) - 5 
​
// console.log(result2)
​
// Новый тип функции
// function expression (Функция внутри выражения)
// Разница от первого подхода заключается в том, что мы не можем взывать ее до инициализации функции
​
// let handler = function(name){
//   console.log('Привет '+name)
// }
// handler('Саша')
///////////////////////////// 
// function handler(name){
//   console.log('Привет '+name)
// }
​
// handler('Петя')
​
// Третий тип функции, который имеет ряд особенностей
// function expression (Стрелочная функция)
​
// 1. Убирается ключевое слово function (заменяется на => )
// 2. Нет нужды в {} скобках в теле функции (если одна команда)
// 3. Не нужен return, поскольку все что идет после => автоматически определяется как retern
​
// let handler = (name) => console.log(name)
​
// Тип данных Объект
// Объект содержит n-ое количество свойств с парой ключ-значение 
​
// let myObj = {
//   name: 'Тигран',
//   age: 29,
//   salary: true
// }
​
// где name, age, salary - ключи, а Тигран, 29 , true - значения свойств
​
// myObj.age и                обращение к ключу age (хранит число 29)
// let a = myObj.age + 10     39         
// console.log(myObj.salary)  true
    
// Взаимодейсвтие с объектом
// Именение сво-ва
​
// let myObj = {
//   name: 'Тигран',
//   age: 29,
//   salary: true
// }
​
// myObj.salary = 1000  изменить/создать свойство
​
// delete myObj.salary - удаление свойства
​
// console.log(myObj)
​
​
// Создайте объект product с 3 свойствами (name, count, price),
//  с значениями ('Велосипед', 5 ,1500)
// 1. Добавьте новое свойство category с занчением 'спорт'
// 2. Измените значение Велосипед на Самокат
// 3. Удалите атрибут count
​
// Решение
// let product = {
//   name: 'Велосипед',
//   count: 5,
//   price: 1500
// }
​
// product.category = 'спорт'
// product.name = 'Самокат'
// delete product.count
​
// console.log(product)